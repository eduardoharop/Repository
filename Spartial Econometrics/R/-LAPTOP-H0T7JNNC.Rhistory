dplyr::filter(symbol=="MSFT") %>%
dplyr::select(rtn) %>%
auto.arima(max.p = 18,max.q = 24, start.p = 0, start.q = 0, seasonal = FALSE,stepwise = FALSE)
arimaMSF
checkresiduals(arimaMSF, lag= 16) ##resiudals are serially correlated at lag 10
checkresiduals(arimaMSF, lag= 20) ##resiudals are serially correlated at lag 10
checkresiduals(arimaMSF, lag= 8)
checkresiduals(arimaMSF, lag= 7)
checkresiduals(arimaMSF, lag= 8) ##serial correlation of order 8
df %>%
as_tibble() %>%
dplyr::filter(symbol=="WMT") %>%
select(rtn) %>%
ts() %>%
adf.test()
df %>%
as_tibble() %>%
dplyr::filter(symbol=="WMT") %>%
select(rtn) %>%
ts() %>%
adf.test()
df %>%
as_tibble() %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(rtn) %>%
ts() %>%
adf.test()
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(rtn) %>%
ACF(rtn,lag_max = 100) %>%
autoplot()+
ggtitle("Wallmart ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
select(rtn) %>%
PACF(rtn,lag_max = 100) %>%
autoplot()+
ggtitle("Wallmart PACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(rtn) %>%
PACF(rtn,lag_max = 100) %>%
autoplot()+
ggtitle("Wallmart PACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
arimaWMT <- df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
select(rtn) %>%
auto.arima(max.p = 9,max.q = 9, start.p = 1, start.q = 1, seasonal = FALSE, stepwise = FALSE)
arimaWMT <- df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(rtn) %>%
auto.arima(max.p = 9,max.q = 9, start.p = 1, start.q = 1, seasonal = FALSE, stepwise = FALSE)
arimaWMT
checkresiduals(arimaWMT, lag= 7)
checkresiduals(arimaWMT, lag= 8) ##serial correlation level 8
#2e)
##GARCH-Microsoft
df <- df %>%
mutate(resMSFT = arimaMSF[["residuals"]], resMSFT2 = (arimaMSF[["residuals"]])^2,
resMSFT = arimaWMT[["residuals"]], resWMT2 = (arimaWMT[["residuals"]])^2)
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="MSFT") %>%
select(resMSFT2) %>%
ACF(resMSFT2,lag_max = 100) %>%
autoplot()+
ggtitle("MSFT res2 ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="MSFT") %>%
dplyrselect(resMSFT2) %>%
ACF(resMSFT2,lag_max = 100) %>%
autoplot()+
ggtitle("MSFT res2 ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="MSFT") %>%
dplyr::select(resMSFT2) %>%
ACF(resMSFT2,lag_max = 100) %>%
autoplot()+
ggtitle("MSFT res2 ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="MSFT") %>%
select(resMSFT2) %>%
PACF(resMSFT2,lag_max = 100) %>%
autoplot()+
ggtitle("MSFT res2 PACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="MSFT") %>%
dplyr::select(resMSFT2) %>%
PACF(resMSFT2,lag_max = 100) %>%
autoplot()+
ggtitle("MSFT res2 PACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
dataMSFT <- df %>%
dplyr::filter(symbol == "MSFT") %>%
dplyr::filter(!is.na(rtn)) %>%
pull(rtn)
auto.garch <- function(gp,gq,p,q,vmodel,df,distribution.model = "norm") {
if (gp == 0){
result <- matrix(nrow = 4,ncol = gq)
modelo <- c()
for(i in 1:gq){
spec <- rugarch::ugarchspec(variance.model=list(model=vmodel, garchOrder=c(0,i)),
mean.model=list(armaOrder=c(p,q),
include.mean=TRUE), distribution.model = distribution.model)
fit <- rugarch::ugarchfit(data = df, spec = spec)
result[,i] <- infocriteria(fit)[,1]
modelo[i]<- c(print(paste0("GARCH ",0,",",i)))
}
criterios <- c("Akaike","Bayes","Shibata", "HQ")
modelo
rownames(result) <- criterios
colnames(result) <- modelo
t.result <- t(result)
for(i in 1:4) {
min <- min(t.result[,i])
modelof <- rownames(t.result)[which(t.result[,i] == min(t.result[,i]))]
print(paste0("El modelo con mejor criterio ", criterios[i] ," es del modelo: ", modelof))
}
return(t.result)
}
else if (gq  == 0){
result <- matrix(nrow = 4,ncol = gp)
modelo <- c()
for(i in 1:gp){
tryCatch({spec <- rugarch::ugarchspec(variance.model=list(model=vmodel, garchOrder=c(i,0)),
mean.model=list(armaOrder=c(p,q),
include.mean=TRUE), distribution.model = distribution.model)
fit <- rugarch::ugarchfit(data = df, spec = spec)
result[,i] <- infocriteria(fit)[,1]
modelo[i]<- c(print(paste0("GARCH ",i,",",0))) }, error = function(e) NA)
}
criterios <- c("Akaike","Bayes","Shibata", "HQ")
modelo
rownames(result) <- criterios
colnames(result) <- modelo
t.result <- t(result)
for(i in 1:4) {
min <- min(t.result[,i])
modelof <- rownames(t.result)[which(t.result[,i] == min(t.result[,i],na.rm=TRUE))]
print(paste0("El modelo con mejor criterio ", criterios[i] ," es del modelo: ", modelof))
}
return(t.result)
}
else {
result <- matrix(nrow = 4,ncol = gp*gq)
modelo <- c()
for(i in 1:gp){
for (j in 1:gq) {
spec <- rugarch::ugarchspec(variance.model=list(model=vmodel, garchOrder=c(i,j)),
mean.model=list(armaOrder=c(p,q),
include.mean=TRUE), distribution.model = distribution.model)
fit <- rugarch::ugarchfit(data = df, spec = spec)
result[,i*j +(i-1)*(gq-j)] <- infocriteria(fit)[,1]
modelo[i*j +(i-1)*(gq-j)]<- c(print(paste0("GARCH ",i,",",j)))
}
}
criterios <- c("Akaike","Bayes","Shibata", "HQ")
modelo
rownames(result) <- criterios
colnames(result) <- modelo
t.result <- t(result)
for(i in 1:4) {
min <- min(t.result[,i])
modelof <- rownames(t.result)[which(t.result[,i] == min(t.result[,i]))]
print(paste0("El modelo con mejor criterio ", criterios[i] ," es del modelo: ", modelof))
}
return(t.result)
}
}
specMSFT <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE))
fitMSFT <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFT)
show(fitMSFT)
##Garch Wallmart
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
select(resWMT2) %>%
ACF(resWMT2,lag_max = 100) %>%
autoplot()+
ggtitle("WMT res2 ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(resWMT2) %>%
ACF(resWMT2,lag_max = 100) %>%
autoplot()+
ggtitle("WMT res2 ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
df %>%
update_tsibble(index = trading_day) %>%
dplyr::filter(symbol=="WMT") %>%
dplyr::select(resWMT2) %>%
PACF(resWMT2,lag_max = 100) %>%
autoplot()+
ggtitle("WMT res2 PACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
dataWMT <- df %>%
dplyr::filter(symbol == "WMT") %>%
dplyr::filter(!is.na(rtn)) %>%
pull(rtn)
specWMT <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,4),
include.mean=TRUE))
fitWMT <- rugarch::ugarchfit(data = dataWMT, spec = specWMT)
show(fitWMT)
fitMSFT@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitMSFT@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Squared Residuals ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitMSFT@fit$z,main="",col="red")
qqline(fitMSFT@fit$z,col="blue")
archTest(fitMSFT@fit$z) ##Conditonal Heteroschedastic test on GARCH residuals show no heteroschedsticity
fitWMT@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitWMT@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Squared Residuals ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitWMT@fit$z,main="",col="red")
qqline(fitWMT@fit$z,col="blue")
specMSFTstd <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE),distribution.model = "std")
fitMSFTstd <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFTstd)
show(fitMSFTstd)
fitMSFTstd@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitMSFTstd@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitMSFTstd@fit$z,main="",col="red")
qqline(fitMSFTstd@fit$z,col="blue")
show(fitMSFTstd)
specWMTstd <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,4),
include.mean=TRUE),distribution.model = "std")
fitWMTstd <- rugarch::ugarchfit(data = dataMSFT, spec = specWMTstd)
show(fitWMTstd)
fitWMTstd@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitWMTstd@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitWMTstd@fit$z,main="",col="red")
qqline(fitWMTstd@fit$z,col="blue")
show(fitWMTstd)
specMSFTstd <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE),distribution.model = "std")
fitMSFTstd <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFTstd)
show(fitMSFTstd)
fitMSFTstd@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitMSFTstd@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitMSFTstd@fit$z,main="",col="red")
qqline(fitMSFTstd@fit$z,col="blue")
show(fitMSFTstd)
specWMTstd <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,4),
include.mean=TRUE),distribution.model = "std")
fitWMTstd <- rugarch::ugarchfit(data = dataMSFT, spec = specWMTstd)
show(fitWMTstd)
fitWMTstd@fit$z %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
fitWMTstd@fit$z^2 %>% ts() %>% as_tsibble() %>%
ACF(lag_max = 20) %>% autoplot()+
ggtitle("GARCH(1,1) Standarized Residuals t-student ACF")+
theme(legend.position="none", axis.text=element_text(size=10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10))
qqnorm(fitWMTstd@fit$z,main="",col="red")
qqline(fitWMTstd@fit$z,col="blue")
show(fitWMTstd)
##2i) Forecasts
##Microsoft
rugarch::ugarchforecast(fitMSFTstd,n.ahead = 20)
##Wallmart
rugarch::ugarchforecast(fitWMTstd,n.ahead = 20)
MSFTforecast <- rugarch::ugarchforecast(fitMSFT,n.ahead = 2)
MSFTforecaststd <- rugarch::ugarchforecast(fitMSFTstd,n.ahead = 2)
MSFTforecast <- matrix(data = c(MSFTforecast@forecast$seriesFor,MSFTforecast@forecast$sigmaFor,MSFTforecaststd@forecast$seriesFor,MSFTforecaststd@forecast$sigmaFor),nrow=2,ncol=4,byrow = FALSE)
colnames(MSFTforecast) <- c("series","sigma","series_std","sigma_std")
MSFTforecast
ttestMSFT <- lm(rtn ~ 1, data = df %>% dplyr::filter(symbol == "MSFT") %>% select(rtn))
specMSFTtgarch <- rugarch::ugarchspec(variance.model=list(model="gjrGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE))
fitMSFTtgarch <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFTtgarch)
show(fitMSFTtgarch)
ttestMSFT <- lm(rtn ~ 1, data = df %>% dplyr::filter(symbol == "MSFT") %>% dplyr::select(rtn))
coeftest(ttestMSFT, vcov = vcovHC(ttestMSFT, type = "HC0"))
specMSFTtgarch <- rugarch::ugarchspec(variance.model=list(model="gjrGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE))
fitMSFTtgarch <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFTtgarch)
show(fitMSFTtgarch)
specMSFTmgarch <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE, archm = TRUE))
fitMSFTmgarch <- rugarch::ugarchfit(data = dataMSFT, spec = specMSFTmgarch)
show(fitMSFTmgarch)
ttestWMT <- lm(rtn ~ 1, data = df %>% dplyr::filter(symbol == "WMT") %>% dplyr::select(rtn))
coeftest(ttestWMT, vcov = vcovHC(ttestWMT, type = "HC0"))
specWMTtgarch <- rugarch::ugarchspec(variance.model=list(model="gjrGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE))
fitWMTtgarch <- rugarch::ugarchfit(data = dataWMT, spec = specWMTtgarch)
show(fitWMTtgarch)
specWMTmgarch <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,4),
include.mean=TRUE, archm = TRUE))
fitWMTmgarch <- rugarch::ugarchfit(data = dataWMT, spec = specWMTmgarch)
show(fitWMTmgarch)
#PART 2
capital <- 10000000
##2ai)
##Microsoft
results2aMSFT <- matrix(nrow =5,ncol=6)
partial <- matrix(ncol=3,nrow=5)
for(i in 1:5){
partial[i,] <- PerformanceAnalytics::VaR(dataMSFT,p =c(0.90,0.95,0.99) ,method = "historical")
if (i == 1){
VaR_1 <- partial[i,]
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results2aMSFT <- cbind(results1,partial)
colnames(results2aMSFT)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results2aMSFT)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
results2aMSFT
results2aWMT <- matrix(nrow =5,ncol=6)
partial <- matrix(ncol=3,nrow=5)
for(i in 1:5){
partial[i,] <- PerformanceAnalytics::VaR(dataWMT,p =c(0.90,0.95,0.99) ,method = "historical")
if (i == 1){
VaR_1 <- partial[i,]
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results2aWMT <- cbind(results1,partial)
colnames(results2aWMT)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results2aWMT)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
results2aWMT
capital*results2aMSFT
capital*results2aMSFT
capital*results2aWMT
VAR <- function(gp,gq,p,q,data,variance.model="sGARCH",distribution.model = "norm"){
specVAR <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(gp,gq)),
mean.model=list(armaOrder=c(p,q),
include.mean=TRUE),distribution.model =distribution.model)
fitVAR <- rugarch::ugarchfit(data = data, spec = specVAR)
forecastVAR <- rugarch::ugarchforecast(fitVAR,n.ahead = 5)
results <- matrix(nrow =5,ncol=6)
partial <- matrix(ncol=3,nrow=5)
if (distribution.model == "norm"){
for(i in 1:5){
partial[i,] <- -(forecastVAR@forecast$seriesFor[i] + qnorm(p = c(0.9,0.95,0.99),mean =0,sd=1)*forecastVAR@forecast$sigmaFor[i])
if (i == 1){
VaR_1 <- -(forecastVAR@forecast$seriesFor[i] + qnorm(p = c(0.9,0.95,0.99),mean =0,sd=1)*forecastVAR@forecast$sigmaFor[i])
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results <- cbind(results1,partial)
colnames(results)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
return(capital*results)
}
else if (distribution.model == "std"){
for(i in 1:5){
partial[i,] <- -(forecastVAR@forecast$seriesFor[i] + forecastVAR@forecast$sigmaFor[i]*qdist(distribution='std', shape=fitVAR@fit[["coef"]][["shape"]], p=c(0.90,0.95,0.99)))
if (i == 1){
VaR_1 <- partial[i,]
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results <- cbind(results1,partial)
colnames(results)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
return(capital*results)
}
else {
}
}
VAR(gp=1,gq=1,p=0,q=0,data = dataMSFT,distribution.model = "norm")
VAR(gp=1,gq=1,p=0,q=0,data = dataWMT,distribution.model = "norm")
VAR(gp=1,gq=1,p=1,q=0,data = dataMSFT,distribution.model = "norm")
VAR(gp=1,gq=1,p=1,q=0,data = dataWMT,distribution.model = "norm")
VAR(gp=1,gq=1,p=1,q=0,data = dataMSFT,distribution.model = "std")
VAR(gp=1,gq=1,p=1,q=0,data = dataWMT,distribution.model = "std")
VAR(gp=1,gq=1,p=1,q=1,data = dataMSFT,distribution.model = "std")
VAR(gp=1,gq=1,p=1,q=1,data = dataWMT,distribution.model = "std")
MVAR <- function(gp,gq,p,q,data1,data2,variance.model="sGARCH",distribution.model = "norm"){
specVAR <- rugarch::ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(gp,gq)),
mean.model=list(armaOrder=c(p,q),
include.mean=TRUE),distribution.model =distribution.model)
fitVAR11 <- rugarch::ugarchfit(data = data1, spec = specVAR)
fitVAR22 <- rugarch::ugarchfit(data = data2, spec = specVAR)
fitVAR12 <- rugarch::ugarchfit(data = data1*data2, spec = specVAR)
forecastVAR11 <- rugarch::ugarchforecast(fitVAR11,n.ahead = 5)
forecastVAR22 <- rugarch::ugarchforecast(fitVAR22,n.ahead = 5)
forecastVAR12 <- rugarch::ugarchforecast(fitVAR12,n.ahead = 5)
results <- matrix(nrow =5,ncol=6)
partial <- matrix(ncol=3,nrow=5)
if (distribution.model == "norm"){
for(i in 1:5){
VAR11 <- -(forecastVAR11@forecast$seriesFor[i] + qnorm(p = c(0.9,0.95,0.99),mean =0,sd=1)*forecastVAR11@forecast$sigmaFor[i])
VAR22 <- -(forecastVAR22@forecast$seriesFor[i] + qnorm(p = c(0.9,0.95,0.99),mean =0,sd=1)*forecastVAR22@forecast$sigmaFor[i])
cor <- forecastVAR12@forecast$sigmaFor[i]/(sqrt(forecastVAR11@forecast$sigmaFor[i])*sqrt(forecastVAR12@forecast$sigmaFor[i]))
partial[i,] <- -sqrt(VAR11^2 + VAR22^2 + cor*VAR11*VAR22)
if (i == 1){
VaR_1 <- partial[i,]
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results <- cbind(results1,partial)
colnames(results)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
return(capital*results)
}
else if (distribution.model == "std"){
for(i in 1:5){
VAR11 <- -(forecastVAR11@forecast$seriesFor[i] + forecastVAR11@forecast$sigmaFor[i]*qdist(distribution='std', shape=fitVAR11@fit[["coef"]][["shape"]], p=c(0.90,0.95,0.99)))
VAR22 <- -(forecastVAR22@forecast$seriesFor[i] + forecastVAR22@forecast$sigmaFor[i]*qdist(distribution='std', shape=fitVAR22@fit[["coef"]][["shape"]], p=c(0.90,0.95,0.99)))
cor <- forecastVAR12@forecast$sigmaFor[i]/(sqrt(forecastVAR11@forecast$sigmaFor[i])*sqrt(forecastVAR12@forecast$sigmaFor[i]))
partial[i,] <- -sqrt(VAR11^2 + VAR22^2 + cor*VAR11*VAR22)
if (i == 1){
VaR_1 <- partial[i,]
results1 <- matrix(c(VaR_1,rep(c(NA,NA,NA),4)),byrow = TRUE,nrow=5,ncol=3)
}
if (i == 5){
results <- cbind(results1,partial)
colnames(results)<- c("VaR_10%_1","VaR_5%_1","VaR_1%_1","VaR_10%_5","VaR_5%_5","VaR_1%_5")
rownames(results)<- c("T+1","T+2","T+3","T+4","T+5")
}
}
return(capital*results)
}
else {
}
}
MVAR(gp=1,gq=1,p=0,q=0,data1 = dataMSFT,data2 = dataWMT,distribution.model = "norm")
MVAR(gp=1,gq=1,p=1,q=0,data1 = dataMSFT,data2 = dataWMT,distribution.model = "norm")
